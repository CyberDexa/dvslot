# DVSlot Kubernetes Deployment Configuration

apiVersion: v1
kind: Namespace
metadata:
  name: dvslot

---

# PostgreSQL Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: dvslot
data:
  POSTGRES_DB: dvslot
  POSTGRES_USER: dvslot

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: dvslot
type: Opaque
data:
  POSTGRES_PASSWORD: cGFzc3dvcmQxMjM= # base64 encoded "password123"

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: dvslot
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: dvslot
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---

# Redis Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: dvslot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes"]
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: dvslot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: dvslot
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---

# RabbitMQ Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: dvslot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management-alpine
        ports:
        - containerPort: 5672
        - containerPort: 15672
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "guest"
        - name: RABBITMQ_DEFAULT_PASS
          value: "guest"
        volumeMounts:
        - name: rabbitmq-storage
          mountPath: /var/lib/rabbitmq
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: rabbitmq-storage
        persistentVolumeClaim:
          claimName: rabbitmq-pvc

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-pvc
  namespace: dvslot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: dvslot
spec:
  selector:
    app: rabbitmq
  ports:
  - name: amqp
    port: 5672
    targetPort: 5672
  - name: management
    port: 15672
    targetPort: 15672

---

# DVSlot API Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: dvslot-config
  namespace: dvslot
data:
  NODE_ENV: "production"
  PORT: "3000"
  DB_HOST: "postgres"
  DB_PORT: "5432"
  DB_NAME: "dvslot"
  DB_USER: "dvslot"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672"

---

apiVersion: v1
kind: Secret
metadata:
  name: dvslot-secret
  namespace: dvslot
type: Opaque
data:
  DB_PASSWORD: cGFzc3dvcmQxMjM= # base64 encoded "password123"
  JWT_SECRET: anlT32lhcmVzdXBlcnNlY3JldGp3dGtleWhlcmU= # base64 encoded
  JWT_REFRESH_SECRET: anNSZWZyZXNoc3VwZXJzZWNyZXRrZXloZXJl= # base64 encoded

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: dvslot-api
  namespace: dvslot
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dvslot-api
  template:
    metadata:
      labels:
        app: dvslot-api
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres -p 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
      - name: api
        image: dvslot/api:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dvslot-secret
              key: DB_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: REDIS_PORT
        - name: RABBITMQ_URL
          valueFrom:
            configMapKeyRef:
              name: dvslot-config
              key: RABBITMQ_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: dvslot-secret
              key: JWT_SECRET
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: dvslot-secret
              key: JWT_REFRESH_SECRET
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---

apiVersion: v1
kind: Service
metadata:
  name: dvslot-api
  namespace: dvslot
spec:
  selector:
    app: dvslot-api
  ports:
  - port: 3000
    targetPort: 3000

---

# Nginx Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: dvslot
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    http {
        upstream api {
            server dvslot-api:3000;
        }
        limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
        server {
            listen 80;
            server_name localhost;
            location /api/ {
                limit_req zone=api_limit burst=20 nodelay;
                proxy_pass http://api;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            location /health {
                proxy_pass http://api;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: dvslot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config

---

apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: dvslot
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80

---

# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dvslot-api-hpa
  namespace: dvslot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dvslot-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
